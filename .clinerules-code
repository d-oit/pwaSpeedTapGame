Now I'll create an enhanced and optimized version of the `.clinerules-code` file that incorporates the selected code and aligns with the role mappings defined in `.clinerules`.

# Speed Tap Challenge - Coding Guidelines

This document outlines the coding standards and best practices for the Speed Tap Challenge project. Following these guidelines ensures code consistency, maintainability, and quality across the codebase.

## Workflow Principles

- **Analyze the complete codebase first before fixing any errors**
- **Update the `/plans/status.md` after every successful task in a task list in the mode document-writer**
- **Testing Philosophy:**
  - Never create "special cases" in application methods to get tests to pass
  - If fixing a test, your only two options are to fix the test or fix the underlying code issue
  - NEVER add a "special case" to code which is only used during testing
  - NEVER add code to product which is only used by tests

## Table of Contents
1. [Role-Based Development](#role-based-development)
2. [TypeScript Standards](#typescript-standards)
3. [React Best Practices](#react-best-practices)
4. [Code Structure](#code-structure)
5. [Testing Requirements](#testing-requirements)
6. [Code Quality Enforcement](#code-quality-enforcement)
7. [Performance Considerations](#performance-considerations)
8. [PWA Standards](#pwa-standards)
9. [Git Workflow](#git-workflow)

## Role-Based Development

Our project uses role-based development to ensure specialized expertise is applied to different parts of the codebase:

### Code Role
Responsible for implementation and maintenance of:
- React components (`src/components/`)
- React hooks (`src/hooks/`)
- Service layer (`src/services/`)
- State management (`src/store/`)
- Type definitions (`src/types/`)

### Playwright Role
Responsible for:
- End-to-end test files (`.spec.ts`, `.test.ts`)
- Playwright tests (`/src/tests/`)
- Test automation and E2E testing

### Jest-Test-Engineer Role
Responsible for:
- Unit test files (`__tests__/`, `__mocks__/`, `.test.ts`)
- Jest tests (`src/__tests__/`)
- Unit testing and mocking

### Document-Writer Role
Responsible for:
- Documentation files (`.md`, `.mdx`, `README`)
- Documentation directories (`docs/`, `plans/`)
- Must update `/plans/status.md` after completing tasks

### Architect Role
Responsible for:
- New feature planning
- System design
- Technical planning

## TypeScript Standards

### Type Safety
- Use strict TypeScript configuration as defined in `tsconfig.app.json` and `tsconfig.node.json`
- Avoid using `any` type; prefer explicit types and interfaces
- Create dedicated interface files for complex data structures
- Use type guards for runtime type checking when necessary

```typescript
// ✅ Good
interface GameState {
  score: number;
  timeLeft: number;
  isActive: boolean;
}

// ❌ Bad
const gameState: any = {
  score: 0,
  timeLeft: 30
};
```

### TypeScript Configuration
Our project uses the following TypeScript compiler options:
- `strict: true` - Enables all strict type checking options
- `noUnusedLocals: true` - Reports errors on unused local variables
- `noUnusedParameters: true` - Reports errors on unused parameters
- `noFallthroughCasesInSwitch: true` - Reports errors for fallthrough cases in switch statements
- `noUncheckedSideEffectImports: true` - Ensures imports with side-effects are properly handled

## React Best Practices

### Component Structure
- Follow atomic design principles for component organization
- Keep components small and focused on a single responsibility
- Use functional components with hooks instead of class components
- Separate business logic from UI components using custom hooks

```typescript
// ✅ Good
function TargetButton({ onClick, position }: TargetButtonProps) {
  return (
    <button 
      className="target-button"
      style={{ left: position.x, top: position.y }}
      onClick={onClick}
    >
      Tap Me!
    </button>
  );
}
```

### Hooks Usage
- Follow React Hooks rules as enforced by `eslint-plugin-react-hooks`
- Use custom hooks to share stateful logic between components
- Memoize expensive calculations with `useMemo` and callbacks with `useCallback`
- Avoid inline function definitions in render to prevent unnecessary re-renders

## Code Structure

### Project Organization
Follow the established folder structure:
```
speed-tap-challenge/
├── public/                   # Static assets and PWA files
├── src/
│   ├── components/           # Reusable UI components
│   ├── hooks/                # Custom React hooks
│   ├── styles/               # CSS Modules
│   ├── utils/                # Helper functions
│   ├── tests/                # Playwright tests
│   ├── __tests__/            # Jest tests
│   ├── App.tsx               # Root component
│   └── main.tsx              # Entry point
├── plans/                    # Documentation and planning
├── docs/                     # Documentation
├── .env.example              # Example environment variables
└── [config files]            # Configuration files
```

### Naming Conventions
- **Files**: Use PascalCase for React components, camelCase for utilities and hooks
- **Components**: Use PascalCase (e.g., `GameBoard.tsx`, `TargetButton.tsx`)
- **Hooks**: Prefix with "use" (e.g., `useGameLogic.ts`, `useTimer.ts`)
- **Interfaces/Types**: Use PascalCase with descriptive names (e.g., `GameState`, `TargetPosition`)
- **CSS Modules**: Use component name with `.module.css` extension (e.g., `GameBoard.module.css`)

## Testing Requirements

### Unit Testing
- Write unit tests for all components, hooks, and utilities
- Use Jest and React Testing Library for testing
- Follow the AAA pattern (Arrange, Act, Assert)
- Test component rendering, user interactions, and state changes

```typescript
// Example unit test
test("increments score when target is tapped", () => {
  render(<GameBoard />);
  const target = screen.getByText(/Tap Me!/i);
  
  fireEvent.click(target);
  
  expect(screen.getByText(/Score: 1/i)).toBeInTheDocument();
});
```

### E2E Testing
- Write end-to-end tests for critical user flows using Playwright
- Test the game on multiple browsers and device sizes
- Verify PWA features like offline functionality and installability

### Code Coverage
- Maintain a minimum code coverage of 90% for all files
- Focus on testing business logic and user interactions
- Run coverage reports regularly with `npm test -- --coverage`

### Testing Philosophy
- **Never** create "special cases" in application methods to get tests to pass
- If fixing a test, your only two options are to fix the test or fix the underlying code issue
- **NEVER** add a "special case" to code which is only used during testing
- **NEVER** add code to product which is only used by tests

## Code Quality Enforcement

### ESLint Configuration
Our project uses ESLint with the following configuration:
- TypeScript ESLint recommended rules
- React Hooks plugin rules
- React Refresh plugin rules

To enhance the configuration, consider adding:
```js
export default tseslint.config({
  extends: [
    ...tseslint.configs.recommendedTypeChecked,
    ...tseslint.configs.strictTypeChecked,
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    parserOptions: {
      project: ["./tsconfig.node.json", "./tsconfig.app.json"],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

### Custom Rules
The project enforces the following custom rules:
- `max-params: 3` - Limit function parameters to 3
- `max-depth: 4` - Limit nesting depth to 4 levels
- `no-nested-ternary: error` - Prohibit nested ternary expressions
- `type-annotations: required` - Require explicit type annotations

### Pre-commit Hooks
Use Husky and lint-staged to enforce code quality before commits:
```json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged && npm run test:changed"
    }
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ]
  }
}
```

## Performance Considerations

### Rendering Optimization
- Use React.memo for components that render often but rarely change
- Avoid unnecessary re-renders by using useCallback and useMemo
- Keep component state as local as possible
- Use the React DevTools Profiler to identify performance bottlenecks

### Asset Optimization
- Optimize images and assets for web use
- Use lazy loading for non-critical resources
- Implement code splitting for larger bundles
- Minimize CSS and JavaScript files in production builds

## PWA Standards

### Service Worker
- Implement service worker for offline functionality
- Use precaching for critical assets
- Handle network failures gracefully
- Test offline functionality regularly

```ts
// service-worker.ts example
precacheAndRoute([
  { url: "/", revision: "v1" },
  { url: "/app-shell", revision: "v1" },
  { url: "/manifest.json", revision: "v1" }
]);
```

### Web App Manifest
- Provide a complete web app manifest
- Include icons in various sizes
- Set appropriate display mode and orientation
- Test installability on different devices

## Git Workflow

### Commit Messages
- Use conventional commit format: `type(scope): message`
- Types: feat, fix, docs, style, refactor, test, chore
- Keep messages concise and descriptive
- Reference issue numbers when applicable

### Branching Strategy
- `main` - Production-ready code
- `develop` - Integration branch for features
- `feature/*` - New features or enhancements
- `fix/*` - Bug fixes
- `refactor/*` - Code improvements without changing functionality

### Pull Requests
- Create descriptive pull request titles and descriptions
- Link related issues
- Ensure all tests pass before requesting review
- Address review comments promptly

---

By following these guidelines, we ensure that the Speed Tap Challenge codebase remains clean, maintainable, and of high quality. These standards should be reviewed and updated periodically as the project evolves.

**Important Reminders:**
1. Analyze the complete codebase first before fixing any errors
2. Update the `/plans/status.md` after every successful task in a task list in the mode document-writer
3. Never create special cases in code just to make tests pass
