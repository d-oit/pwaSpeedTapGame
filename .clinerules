# Role Mappings Configuration

# File Pattern Based Mappings
file_patterns:
  - pattern: "\.(spec|test)\\.(ts|tsx|js|jsx)$"
    role: playwright
    description: "End-to-end test files"
    priority: 1

  - pattern: "(__tests__/.*|__mocks__/.*|\\.test\\.(ts|tsx|js|jsx)$)"
    role: jest-test-engineer
    description: "Unit test files and mocks"
    priority: 1

  - pattern: "\\.(md|mdx)$|README"
    role: document-writer
    description: "Documentation files"
    priority: 1

  - pattern: "docs/.*|plans/.*"
    role: document-writer
    description: "Documentation directories"
    priority: 1

  - pattern: "\\.roomodes$|cline_custom_modes\\.json$"
    role: orchestrator
    description: "Mode configuration files"
    priority: 2

# Component Type Mappings
component_types:
  - directory: "speed-tap-challenge/src/components"
    role: code
    description: "React components"

  - directory: "speed-tap-challenge/src/hooks"
    role: code
    description: "React hooks"

  - directory: "speed-tap-challenge/src/services"
    role: code
    description: "Service layer"

  - directory: "speed-tap-challenge/src/store"
    role: code
    description: "State management"

  - directory: "speed-tap-challenge/src/types"
    role: code
    description: "Type definitions"

  - directory: "speed-tap-challenge/src/tests"
    role: playwright
    description: "Playwright tests"

  - directory: "speed-tap-challenge/src/__tests__"
    role: jest-test-engineer
    description: "Jest tests"

# Fallback Rules
fallbacks:
  - condition: "new_feature"
    role: architect
    description: "New feature planning"

  - condition: "improve_design"
    role: designer
    description: "Improve ui/ux design"  
    
  - condition: "implementation"
    role: code
    description: "Implementation work"

  - condition: "default"
    role: architect
    description: "Default role for all other files"
    priority: 0  

# Validation Rules
validation:
  - rule: "no_pattern_conflicts"
    description: "File patterns must not overlap"
    
  - rule: "capability_check"
    description: "Roles must have necessary capabilities"
    
  - rule: "fallback_required"
    description: "Every scenario must have a fallback role"

  - rule: "llm_output_deduplication"
    description: "If LLM API generates repetitive outputs, escalate to architect"
    strategies:
      - name: "token_similarity"
        description: "Compare output tokens using cosine/Jaccard similarity"
        threshold: 0.90
      - name: "ngram_overlap"
        description: "Detect repeated word sequences"
        ngram_size: 5
        threshold: 0.80
      - name: "semantic_similarity"
        description: "Compare embeddings of outputs"
        model: "sentence-transformers"
        threshold: 0.85
      - name: "pattern_matching"
        description: "Direct pattern/structure matching"
        techniques:
          - "regex patterns"
          - "AST comparison"
          - "string matching"

# Mode Capabilities
capabilities:
  playwright:
    - "test_automation"
    - "e2e_testing"
    
  jest-test-engineer:
    - "unit_testing"
    - "mocking"
    
  document-writer:
    - "documentation"
    - "specifications"
    
  orchestrator:
    - "task_coordination"
    - "mode_management"
    
  architect:
    - "system_design"
    - "technical_planning"
    - "llm_optimization"
    
  code:
    - "implementation"
    - "maintenance"
    - "output_monitoring"

  designer:
    - "ui/ux design"
    - "mockups"

# Escalations
escalations:
  - trigger: "llm_repetition_detected"
    from_role: "code"
    to_role: "architect"
    action: "Request architectural guidance for LLM output optimization"
    description: "When LLM generates repetitive content"
    detection:
      methods:
        - type: "token_similarity"
          threshold: 0.90
          action: "Compare new outputs with session history"
        - type: "ngram_analysis"
          ngram_size: 5
          threshold: 0.80
          action: "Check for repeated word sequences"
        - type: "semantic_comparison"
          model: "sentence-transformers"
          threshold: 0.85
          action: "Compare semantic meaning of outputs"
        - type: "pattern_detection"
          techniques:
            - "regex matching"
            - "AST parsing"
            - "string similarity"
          action: "Identify structural repetition"
    resolution:
      steps:
        - "Analyze repetition patterns"
        - "Adjust prompts or generation strategy"
        - "Update context management"
        - "Refine similarity thresholds"

# Output Management
output_tracking:
  session_history:
    enabled: true
    max_entries: 100
  similarity_checks:
    enabled: true
    methods:
      - "token_based"
      - "semantic"
      - "structural"
  deduplication:
    enabled: true
    strategy: "intelligent"
    thresholds:
      token_similarity: 0.90
      semantic_similarity: 0.85
      pattern_match: 0.80
