# Role Mappings Configuration

# File Pattern Based Mappings
file_patterns:
  - pattern: "\.(spec|test)\\.(ts|tsx|js|jsx)$"
    role: playwright
    description: "End-to-end test files"
    priority: 1

  - pattern: "(__tests__/.*|__mocks__/.*|\\.test\\.(ts|tsx|js|jsx)$)"
    role: jest-test-engineer
    description: "Unit test files and mocks"
    priority: 1

  - pattern: "\\.(md|mdx)$|README"
    role: document-writer
    description: "Documentation files"
    priority: 2

  - pattern: "\\.roomodes$|cline_custom_modes\\.json$"
    role: orchestrator
    description: "Mode configuration files"
    priority: 1

# Component Type Mappings
component_types:
  - directory: "src/components"
    role: code
    description: "React components"
    
  - directory: "src/hooks"
    role: code
    description: "React hooks"
    
  - directory: "src/services"
    role: architect
    description: "Service layer"
    
  - directory: "src/store"
    role: architect
    description: "State management"
    
  - directory: "src/types"
    role: architect
    description: "Type definitions"

# Fallback Rules
fallbacks:
  - condition: "new_feature"
    role: architect
    description: "New feature planning"
    
  - condition: "implementation"
    role: code
    description: "Implementation work"

# Validation Rules
validation:
  - rule: "no_pattern_conflicts"
    description: "File patterns must not overlap"
    
  - rule: "capability_check"
    description: "Roles must have necessary capabilities"
    
  - rule: "fallback_required"
    description: "Every scenario must have a fallback role"

# Mode Capabilities
capabilities:
  playwright:
    - "test_automation"
    - "e2e_testing"
    
  jest-test-engineer:
    - "unit_testing"
    - "mocking"
    
  document-writer:
    - "documentation"
    - "specifications"
    
  orchestrator:
    - "task_coordination"
    - "mode_management"
    
  architect:
    - "system_design"
    - "technical_planning"
    
  code:
    - "implementation"
    - "maintenance"
